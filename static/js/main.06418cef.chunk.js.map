{"version":3,"sources":["App.tsx","utils.ts","index.tsx"],"names":["items","from","to","numbers","n","push","getNumbers","map","App","useState","perPage","setPerPage","currentPage","setCurrentPage","startItem","endItem","itemsToShow","slice","pagesList","Array","Math","ceil","length","fill","a","i","className","id","onChange","event","Number","target","value","handleClickSelect","htmlFor","classNames","disabled","href","onClick","page","active","item","ReactDOM","render","document","getElementById"],"mappings":"oNAMMA,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBC,KAAI,SAAAH,GAAC,qBAAYA,MAEPI,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAYJ,GAAWE,EAAc,GACrCG,EAAUL,EAAWE,EACrBI,EAAchB,EAAMiB,MAAMH,EAAWC,GACrCG,EAAa,IAAIC,MAAMC,KAC1BC,KAAKrB,EAAMsB,QAAUP,EAAUD,KAC/BS,KAAK,GAAGhB,KAAI,SAACiB,EAAGC,GAAJ,OAAUA,EAAID,KA8B7B,OACE,sBAAKE,UAAU,YAAf,UACE,wDAEA,oBAAGA,UAAU,OAAO,UAAQ,OAA5B,iBAEG,IACAd,EACA,IAJH,SAMG,IACAE,EAAY,EACZ,IARH,IAUG,IACAC,EACA,IAZH,KAcG,IACAf,EAAMsB,OAfT,OAmBA,sBAAKI,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRC,GAAG,kBACHD,UAAU,eACVE,SAAU,SAACC,GAAD,OAzDM,SAACA,GACzBlB,EAAWmB,OAAOD,EAAME,OAAOC,QAC/BnB,EAAe,GAuDcoB,CAAkBJ,IAJzC,UAME,wBAAQG,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOE,QAAQ,kBAAkBR,UAAU,qBAA3C,+BAMF,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UACFS,IAAW,YAAa,CACtBC,SAAUxB,IAAgBM,EAAU,KAFxC,SAME,mBACE,UAAQ,WACRQ,UAAU,YACVW,KAAK,QACL,gBAAc,QACdC,QA/Ec,WAStBzB,EANoB,IAAhBD,EACSA,EAEAA,EAAc,IAoErB,oBAUDM,EAAUX,KAAI,SAAAgC,GAAI,OACjB,oBACEb,UACES,IAAW,YAAa,CACtBK,OAAQD,IAAS3B,IAHvB,SAOE,mBACE,UAAQ,WACRc,UAAU,YACVW,KAAK,UAELC,QAAS,kBAAMzB,EAAe0B,IALhC,SAOGA,GAHIA,QAQX,oBAAIb,UAAWS,IAAW,YAAa,CACrCC,SAAUxB,IAAgBM,EAAUA,EAAUI,OAAS,KADzD,SAIE,mBACE,UAAQ,WACRI,UAAU,YACVW,KAAK,QACL,gBAAc,QACdC,QArGc,WAGlB1B,IAAiBM,EAAUI,QAI7BT,EADaD,EAAc,IA0FvB,uBAWJ,6BACGI,EAAYT,KAAI,SAAAkC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YE/IlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.06418cef.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(7);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const startItem = perPage * (currentPage - 1);\n  const endItem = perPage * (currentPage);\n  const itemsToShow = items.slice(startItem, endItem);\n  const pagesList = (new Array(Math\n    .ceil(items.length / (endItem - startItem))))\n    .fill(1).map((a, i) => i + a);\n\n  const handleClickSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(Number(event.target.value));\n    setCurrentPage(1);\n  };\n\n  const handleArrowPrev = () => {\n    let prevPage = 0;\n\n    if (currentPage === 1) {\n      prevPage = currentPage;\n    } else {\n      prevPage = currentPage - 1;\n    }\n\n    setCurrentPage(prevPage);\n  };\n\n  const handleArrowNext = () => {\n    let togglePage = 0;\n\n    if (currentPage === (pagesList.length)) {\n      togglePage = currentPage;\n    } else {\n      togglePage = currentPage + 1;\n      setCurrentPage(togglePage);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination </h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        Page\n        {' '}\n        {currentPage}\n        {' '}\n        (items\n        {' '}\n        {startItem + 1}\n        {' '}\n        -\n        {' '}\n        {endItem}\n        {' '}\n        of\n        {' '}\n        {items.length}\n        )\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(event) => handleClickSelect(event)}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <ul className=\"pagination\">\n        <li className={\n          classNames('page-item', {\n            disabled: currentPage === pagesList[0],\n          })\n        }\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled=\"false\"\n            onClick={handleArrowPrev}\n          >\n            «\n          </a>\n        </li>\n        {pagesList.map(page => (\n          <li\n            className={\n              classNames('page-item', {\n                active: page === currentPage,\n              })\n            }\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href=\"#{page}\"\n              key={page}\n              onClick={() => setCurrentPage(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li className={classNames('page-item', {\n          disabled: currentPage === pagesList[pagesList.length - 1],\n        })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled=\"false\"\n            onClick={handleArrowNext}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {itemsToShow.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}